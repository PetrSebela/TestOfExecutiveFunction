//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Keybinds.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Keybinds: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Keybinds()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Keybinds"",
    ""maps"": [
        {
            ""name"": ""TrailMakingTest"",
            ""id"": ""b86a9282-8a45-4dfb-8e9d-333f8a3e9da2"",
            ""actions"": [
                {
                    ""name"": ""MouseButtonDown"",
                    ""type"": ""Button"",
                    ""id"": ""e0782e89-15f0-4102-88bb-27ed799d1a84"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""0e6034d0-0d85-4211-bf96-72e99b23821c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a06a9a9-9879-40e1-b66e-e1232b88ee15"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseButtonDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4c704ae-5bde-4ac3-8ad5-bc738358a1f3"",
                    ""path"": ""<Mouse>/{Point}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TrailMakingTest
        m_TrailMakingTest = asset.FindActionMap("TrailMakingTest", throwIfNotFound: true);
        m_TrailMakingTest_MouseButtonDown = m_TrailMakingTest.FindAction("MouseButtonDown", throwIfNotFound: true);
        m_TrailMakingTest_MousePosition = m_TrailMakingTest.FindAction("MousePosition", throwIfNotFound: true);
    }

    ~@Keybinds()
    {
        UnityEngine.Debug.Assert(!m_TrailMakingTest.enabled, "This will cause a leak and performance issues, Keybinds.TrailMakingTest.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TrailMakingTest
    private readonly InputActionMap m_TrailMakingTest;
    private List<ITrailMakingTestActions> m_TrailMakingTestActionsCallbackInterfaces = new List<ITrailMakingTestActions>();
    private readonly InputAction m_TrailMakingTest_MouseButtonDown;
    private readonly InputAction m_TrailMakingTest_MousePosition;
    public struct TrailMakingTestActions
    {
        private @Keybinds m_Wrapper;
        public TrailMakingTestActions(@Keybinds wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseButtonDown => m_Wrapper.m_TrailMakingTest_MouseButtonDown;
        public InputAction @MousePosition => m_Wrapper.m_TrailMakingTest_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_TrailMakingTest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TrailMakingTestActions set) { return set.Get(); }
        public void AddCallbacks(ITrailMakingTestActions instance)
        {
            if (instance == null || m_Wrapper.m_TrailMakingTestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TrailMakingTestActionsCallbackInterfaces.Add(instance);
            @MouseButtonDown.started += instance.OnMouseButtonDown;
            @MouseButtonDown.performed += instance.OnMouseButtonDown;
            @MouseButtonDown.canceled += instance.OnMouseButtonDown;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(ITrailMakingTestActions instance)
        {
            @MouseButtonDown.started -= instance.OnMouseButtonDown;
            @MouseButtonDown.performed -= instance.OnMouseButtonDown;
            @MouseButtonDown.canceled -= instance.OnMouseButtonDown;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(ITrailMakingTestActions instance)
        {
            if (m_Wrapper.m_TrailMakingTestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITrailMakingTestActions instance)
        {
            foreach (var item in m_Wrapper.m_TrailMakingTestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TrailMakingTestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TrailMakingTestActions @TrailMakingTest => new TrailMakingTestActions(this);
    public interface ITrailMakingTestActions
    {
        void OnMouseButtonDown(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
